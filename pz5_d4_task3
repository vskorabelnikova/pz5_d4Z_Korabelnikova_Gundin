import logging
import random
import asyncio
from datetime import datetime
from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# Включаем логирование
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Токен бота
TOKEN = '7437730276:AAEcGcKzegUuB1qWBHa67uXOBxdLLdGiq0I'

# Словарь случайных сообщений
random_messages_dict = [
    "Привет!", "Как дела?", "Что нового?", "Здравствуй!", "Приятно тебя видеть!"
]

# Файл с фразами
file_name = "random_phrases.txt"

# Файл для сохранения переписки
conversation_log_file = "conversation_log.txt"

# Список для игры
game_words = ["яблоко", "груша", "банан", "апельсин", "ананас", "виноград", "фейхоа", "стоп"]
game_active = False
secret_word = None
timer_task = None


# Функция для записи сообщений в файл
def log_conversation(user_id, username, message, bot_reply):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(conversation_log_file, "a", encoding="utf-8") as log_file:
        log_file.write(f"[{timestamp}] {username} (ID: {user_id}): {message}\n")
        log_file.write(f"[{timestamp}] Бот: {bot_reply}\n\n")


# Обработчик команды /start
async def send_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random_message = random.choice(random_messages_dict)
    user = update.effective_user
    await update.message.reply_text(random_message)
    log_conversation(user.id, user.username, "/start", random_message)


# Таймер для отправки случайных фраз из файла
async def send_random_phrase_from_file(chat_id, bot: Bot):
    while True:
        try:
            with open(file_name, "r", encoding="utf-8") as f:
                lines = f.readlines()
                if lines:
                    random_line = random.choice(lines).strip()
                    await bot.send_message(chat_id=chat_id, text=random_line)
                    # Логируем отправленное сообщение
                    log_conversation(chat_id, chat_id, "Таймер: фраза", random_line)
            await asyncio.sleep(5)  # Интервал между отправками
        except Exception as e:
            logger.error(f"Ошибка при чтении файла: {e}")
            await asyncio.sleep(5)


# Обработчик команды для запуска таймера
async def start_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global timer_task
    chat_id = update.message.chat_id

    if timer_task:
        bot_reply = "Таймер уже запущен."
        await update.message.reply_text(bot_reply)
        log_conversation(update.effective_user.id, update.effective_user.username, "/start_timer", bot_reply)
        return

    bot_reply = "Таймер запущен. Буду отправлять случайные фразы каждые 5 секунд!"
    await update.message.reply_text(bot_reply)
    log_conversation(update.effective_user.id, update.effective_user.username, "/start_timer", bot_reply)

    async def timer_wrapper():
        await send_random_phrase_from_file(chat_id, context.bot)

    timer_task = asyncio.create_task(timer_wrapper())


# Обработчик команды для остановки таймера
async def stop_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global timer_task
    if timer_task:
        timer_task.cancel()
        timer_task = None
        bot_reply = "Таймер остановлен."
    else:
        bot_reply = "Таймер не был запущен."

    await update.message.reply_text(bot_reply)
    log_conversation(update.effective_user.id, update.effective_user.username, "/stop_timer", bot_reply)


# Простая игра
async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_active, secret_word
    game_active = True
    secret_word = random.choice([word for word in game_words if word != "стоп"])
    bot_reply = (
        "Игра началась! Я загадал фрукт из списка. Попробуй угадать! "
        "(яблоко, груша, банан, апельсин, ананас, виноград, фейхоа)"
    )
    await update.message.reply_text(bot_reply)
    log_conversation(update.effective_user.id, update.effective_user.username, "/start_game", bot_reply)


async def stop_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_active
    game_active = False
    bot_reply = "Игра остановлена."
    await update.message.reply_text(bot_reply)
    log_conversation(update.effective_user.id, update.effective_user.username, "/stop_game", bot_reply)


async def play_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_active, secret_word
    user_message = update.message.text
    if game_active:
        user_guess = user_message.lower()
        if user_guess == "стоп":
            game_active = False
            bot_reply = "Игра окончена!"
        elif user_guess == secret_word:
            game_active = False
            bot_reply = f"Поздравляю! Ты угадал: {secret_word}!"
        else:
            bot_reply = "Неправильное слово, попробуй еще раз."
    else:
        bot_reply = "Игра не запущена. Введите /start_game, чтобы начать."

    await update.message.reply_text(bot_reply)
    log_conversation(update.effective_user.id, update.effective_user.username, user_message, bot_reply)


# Обработчик для загрузки файла
async def handle_file_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if update.message.document:
        document = update.message.document
        file_name = document.file_name
        file_extension = file_name.split('.')[-1].lower()

        # Проверка на текстовые файлы
        if file_extension not in ["txt"]:
            bot_reply = "Пожалуйста, загрузите только текстовый файл (.txt)."
            await update.message.reply_text(bot_reply)
            return

        # Скачиваем файл и сохраняем его
        try:
            # Скачиваем файл
            file = await document.get_file()
            file_path = f"uploaded_{file_name}"
            await file.download_to_drive(file_path)

            logger.info(f"Файл сохранён: {file_path}")

            # Читаем содержимое
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()

            bot_reply = f"Содержимое файла:\n{content}"
        except Exception as e:
            bot_reply = "Не удалось обработать файл. Убедитесь, что это текстовый файл."
            logger.error(f"Ошибка при обработке файла: {e}")

        await update.message.reply_text(bot_reply)
        log_conversation(user.id, user.username, f"Загрузка файла: {file_name}", bot_reply)


# Основная функция для запуска бота
def main():
    application = Application.builder().token(TOKEN).build()

    # Регистрация хендлеров
    application.add_handler(CommandHandler("start", send_welcome))
    application.add_handler(CommandHandler("start_timer", start_timer))
    application.add_handler(CommandHandler("stop_timer", stop_timer))
    application.add_handler(CommandHandler("start_game", start_game))
    application.add_handler(CommandHandler("stop_game", stop_game))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, play_game))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_file_upload))

    # Запуск бота
    logger.info("Бот запущен!")
    application.run_polling()


if __name__ == "__main__":
    main()
